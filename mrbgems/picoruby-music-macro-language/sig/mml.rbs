class MML
  DURATION_BASE: Float
  NOTES: Hash[Symbol, Integer]

  @octave: Integer
  @tempo: Integer
  @q: Integer
  @volume: Integer
  @transpose: Integer
  @common_duration: Integer

  type command_t = :volume | :envelope | :lfo | :pan | :timbre | :noise
  type play_t    = :play
  type rest_t    = :rest

  def initialize: () -> void
  def compile: (String track) { (play_t command, Integer | Float arg1, Integer arg2) -> untyped } -> Integer
             | (String track) { (rest_t command, 0, Integer arg2) -> untyped } -> Integer
             | (String track) { (command_t command, Integer arg1, ?Integer arg2) -> untyped } -> Integer
  def compile_multi: (Hash[Integer, String] tracks) { (Integer delta, Integer channel, command_t | play_t | rest_t command, *Integer args) -> untyped } -> Integer
  private def get_pitch: (String note, String | nil semitone, Integer pos) -> [Integer | Float, Integer]
  private def number_str: (String str, Integer i) -> [String, Integer]
  private def count_punto: (String str, Integer i) -> [Integer, Integer]
  private def coef: (Integer punti) -> Float
  private def expand_loops: (String track) -> String
  private def expand: (String str, Integer index, ?Integer depth) -> [String, Integer]
  private def update_common_duration: (Integer | Float fraction) -> void
end
