type header_t = Hash[String, String]
type httpreturn = {
  status: Integer,
  headers: header_t,
  body: String
}

module Net
  class HTTPUtil
    def self.format_response: (String?) -> (httpreturn | nil)
  end

  class DNS
    def self.resolve: (String host, bool is_tcp) -> String
  end

  class UDPClient
    def self.send: (String host, Integer port, String content, bool is_dtls) -> String?
    private def self._send_impl: (String host, Integer port, String content, bool is_dtls) -> String?
  end

  class TCPClient
    def self.request: (String host, Integer port, String content, bool is_tls) -> String?
    private def self._request_impl: (String host, Integer port, String content, bool is_tls) -> String?
  end

  class HTTPClientBase
    @host: String
    def initialize: (String host) -> void
    private def build_request: (String method, String path, ?header_t headers, ?String body) -> String
    private def make_request: (String method, String path, ?header_t headers, ?String body) -> (httpreturn | nil)
    private def port: -> Integer
    private def use_tls: -> bool
    def get: (String path) -> (httpreturn | nil)
    def get_with_headers: (String path, header_t headers) -> (httpreturn | nil)
    def post: (String path, header_t headers, String body) -> (httpreturn | nil)
    def put:  (String path, header_t headers, String body) -> (httpreturn | nil)
  end

  class HTTPClient < HTTPClientBase
    private def port: -> Integer
    private def use_tls: -> bool
  end

  class HTTPSClient < HTTPClientBase
    private def port: -> Integer
    private def use_tls: -> bool
  end
end
